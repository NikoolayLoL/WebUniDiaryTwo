@page
@model WebUniDiaryTwo.Pages.Student.SemesterOverviewModel
@{
    ViewData["Title"] = "Semester Overview";
}

@Html.Partial("Student/_ToolBar")

<div class="container mt-4">
    <div class="text-center">
        <h3 class="display-4">@Model.SUser.Semester.Name</h3>
        <h4 class="text-muted">@Model.SUser.User.FirstName @Model.SUser.User.LastName</h4>
    </div>

    <div class="mt-5">
        <h4>Subjects and Grades</h4>
        <table class="table table-striped table-hover mt-3">
            <thead class="table-dark">
                <tr>
                    <th>Subject Name</th>
                    <th>Grades</th>
                    <th>Average</th>
                    <th>Final</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subject in Model.SSubject.OrderBy(x => x.SemesterLenghtId))
                {
                    decimal gradeExam = 0;
                    int countExam = 0;
                    decimal gradeWork = 0;
                    int countWork = 0;
                    decimal gradeTask = 0;
                    int countTask = 0;
                    decimal gradeAttention = 0;
                    int countAttention = 0;
                    decimal gradeExercises = 0;
                    int countExercises = 0;
                    decimal gradeExtra = 0;
                    int countExtra = 0;

                    decimal averageGrade = 0;
                    <tr>
                        <td>
                            <span class="badge bg-info me-3">@subject.SemesterLenghtId</span>
                            @subject.Subject.Name
                        </td>
                        @{decimal finalGrade = 0;}
                        <td>
                            <div class="d-flex flex-wrap">
                                @{
                                    
                                    if (subject.Subject.Grades.Where(g => g.SemesterUserId == Model.SUser.Id).Any())
                                    {
                                        foreach (var grade in subject.Subject.Grades.Where(g => g.SemesterUserId == Model.SUser.Id))
                                        {
                                            if (@grade.Type == "Final")
                                            {
                                                finalGrade = grade.GradeValue;
                                            }
                                            else
                                            {
                                                switch (grade.Type)
                                                {
                                                    case "Exam":
                                                        countExam++;
                                                        gradeExam += grade.GradeValue;
                                                        break;
                                                    case "Work":
                                                        countWork++;
                                                        gradeWork += grade.GradeValue;
                                                        break;
                                                    case "Task":
                                                        countTask++;
                                                        gradeTask += grade.GradeValue;
                                                        break;
                                                    case "Attention":
                                                        countAttention++;
                                                        gradeAttention += grade.GradeValue;
                                                        break;
                                                    case "Exercises":
                                                        countExercises++;
                                                        gradeExercises += grade.GradeValue;
                                                        break;
                                                    case "Extra":
                                                        countExtra++;
                                                        gradeExtra += grade.GradeValue;
                                                        break;
                                                    default:
                                                        break;
                                                }

                                                var badgeClass = grade.GradeValue switch
                                                {
                                                    6 => "bg-success text-white",
                                                    5 => "bg-primary text-white",
                                                    4 => "bg-info text-dark",
                                                    3 => "bg-warning text-dark",
                                                    2 => "bg-danger text-white",
                                                    _ => "bg-secondary text-white"
                                                };

                                                <span class="badge @badgeClass m-1">@grade.GradeValue (@grade.Type)</span>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <span>No grades available</span>
                                    }
                                }
                            </div>
                        </td>
                        <td>
                            @if (Model.Formulas.Any(f => f.SubjectId == subject.Subject.Id))
                            {
                                var formula = Model.Formulas.FirstOrDefault(f => f.SubjectId == subject.SubjectId);
                                try
                                {
                                    gradeExam = (gradeExam / countExam) * (decimal) formula.MultiplierExam / 100;
                                }
                                catch (Exception ex) { }
                                try
                                {
                                    gradeWork = (gradeWork / countWork) * (decimal) formula.MultiplierWork / 100;
                                }
                                catch (Exception ex) { }
                                try
                                {
                                    gradeTask = (gradeTask / countTask) * (decimal) formula.MultiplierTask / 100;
                                }
                                catch (Exception ex) { }
                                try
                                {
                                    gradeAttention = (gradeAttention / countAttention) * (decimal) formula.MultiplierAttention / 100;
                                }
                                catch (Exception ex) { }
                                try
                                {
                                    gradeExercises = (gradeExercises / countExercises) * (decimal) formula.MultiplierExercises / 100;
                                }
                                catch (Exception ex) { }
                                try
                                {
                                    gradeExtra = (gradeExtra / countExtra) * (decimal) formula.MultiplierExtra / 100;
                                }
                                catch (Exception ex) { }

                                averageGrade = gradeExam + gradeWork + gradeTask + gradeAttention + gradeExercises + gradeExtra;
                                averageGrade = @Math.Round(averageGrade, 2);
                                var badgeClass = string.Empty;

                                if (averageGrade >= (decimal) 5)
                                {
                                    badgeClass = "bg-success text-white";
                                }
                                else if (averageGrade >= (decimal) 3.5)
                                {
                                    badgeClass = "bg-warning text-dark";
                                }
                                else
                                {
                                    badgeClass = "bg-danger text-white";

                                }

                                <span class="badge m-1 @badgeClass">@averageGrade</span>
                            }
                            else
                            {
                                <span class="badge bg-info">No formula yet</span>
                            }
                        </td>
                        <td>
                            <div class="d-flex flex-wrap">
                                @{
                                    if (finalGrade != 0)
                                    {
                                        <span class="badge bg-warning text-dark m-1">@finalGrade</span>
                                    }
                                    else
                                    {
                                        <span>Not graded yet</span>
                                    }
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>