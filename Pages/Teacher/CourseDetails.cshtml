@page
@model WebUniDiaryTwo.Pages.Teacher.CourseDetailsModel
@{
    ViewData["Title"] = "Course Details";
}

@Html.Partial("Teacher/_ToolBar")

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <h2 class="display-4 text-center">@Model.SSubject.Semester.Name - @Model.SSubject.Subject.Name</h2>
            <p class="lead text-center">@Model.SSubject.Subject.Description</p>
            <hr />
        </div>
    </div>

    @{
        if (Model.Formula == null)
        {
            <div class="d-flex justify-content-center mt-3">
                <span class="alert alert-danger alert-dismissible">Formula is not set up for this subject!</span>
            </div>
        }
    }

    <div class="row">
        <div class="col-md-12 text-center">
            <h5>Legend:</h5>
            <span class="badge bg-success me-2">Exam</span>
            <span class="badge bg-primary me-2">Work</span>
            <span class="badge bg-info me-2">Task</span>
            <span class="badge bg-warning text-dark me-2">Attention</span>
            <span class="badge bg-secondary me-2">Exercises</span>
            <span class="badge bg-dark text-white me-2">Extra</span>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-lg">
                <div class="card-body">
                    <h5 class="card-title text-primary">Students & Grades</h5>
                    <ul class="list-group">
                        @foreach (var SUser in Model.SSubject.Semester.SemesterUsers)
                        {
                            <li class="list-group-item">
                                <h6>@SUser.User.FirstName @SUser.User.LastName</h6>

                                <div class="d-flex flex-wrap mb-3">
                                    @{
                                        // Retrieve all grades for the current subject and user
                                        var gradeGroups = Model.Grades
                                        .Where(x => x.Subject.Id == Model.SSubject.SubjectId && x.SemesterUserId == SUser.Id)
                                        .ToList();

                                        // Find and remove the final grade from the grade groups
                                        var finalGrade = gradeGroups.FirstOrDefault(x => x.Type == "Final");
                                        if (finalGrade != null)
                                        {
                                            gradeGroups.Remove(finalGrade);
                                        }

                                        // Group the remaining grades by their type and sort by type
                                        var groupedGrades = gradeGroups
                                        .GroupBy(g => g.Type)
                                        .OrderBy(g => g.Key)
                                        .ToList();

                                        // Display the grouped grades
                                        foreach (var group in groupedGrades)
                                        {
                                            var badgeClass = group.Key switch
                                            {
                                                "Exam" => "bg-success text-white",
                                                "Work" => "bg-primary text-white",
                                                "Task" => "bg-info text-dark",
                                                "Attention" => "bg-warning text-dark",
                                                "Exercises" => "bg-secondary text-white",
                                                "Extra" => "bg-dark text-white",
                                                _ => "bg-light text-dark"
                                            };

                                            <div class="me-4 mb-2">
                                                @foreach (var grade in group)
                                                {
                                                    <span class="badge @badgeClass me-1">@grade.GradeValue</span>
                                                }
                                                <span class="badge @badgeClass">@group.Key</span>
                                            </div>
                                        }
                                    }
                                </div>

                                <!-- New Grade Input Section with Dropdowns -->
                                <div class="d-flex mb-3">
                                    <select id="gradeValue-@SUser.Id" class="form-select me-2" style="width: 130px;">
                                        <option value="" disabled selected>Select Grade Value</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                        <option value="6">6</option>
                                    </select>

                                    <select id="gradeType-@SUser.Id" class="form-select me-2" style="width: 180px;">
                                        <option value="" disabled selected>Select Grade Type</option>
                                        <option value="Exam">Exam</option>
                                        <option value="Work">Work</option>
                                        <option value="Task">Task</option>
                                        <option value="Attention">Attention</option>
                                        <option value="Exercises">Exercises</option>
                                        <option value="Extra">Extra</option>
                                    </select>

                                    <!-- Buttons wrapped in a div to control alignment -->
                                    <div class="d-flex">
                                        <button class="btn btn-primary me-2" onclick="submitGrade(@SUser.Id, @Model.SSubject.SubjectId)" @(finalGrade == null ? "" : "disabled")>
                                            Submit Grade
                                        </button>
                                        <button class="btn btn-warning" onclick="finalGrade(@SUser.Id, @Model.SSubject.SubjectId, this)" @(finalGrade == null ? "" : "disabled")>
                                            Final Grade
                                        </button>
                                    </div>
                                </div>

                                <!-- Display Average and Final Grade -->
                                @try
                                {
                                    <div class="d-flex justify-content-between align-items-center mt-3">
                                        <div class="avgGrade">
                                            <h6>Average Grade:</h6>
                                            <span class="badge bg-dark text-white">
                                                @if(Model.Formula != null)
                                                {
                                                    decimal gradeExam = 0;
                                                    int countExam = 0;
                                                    decimal gradeWork = 0;
                                                    int countWork = 0;
                                                    decimal gradeTask = 0;
                                                    int countTask = 0;
                                                    decimal gradeAttention = 0;
                                                    int countAttention = 0;
                                                    decimal gradeExercises = 0;
                                                    int countExercises = 0;
                                                    decimal gradeExtra = 0;
                                                    int countExtra = 0;

                                                    decimal averageGrade = 0;

                                                    // TODO calculate this in the controller and pass it as key value dictionary object, where the key is the userID
                                                    foreach (var group in groupedGrades)
                                                    {
                                                        @* var gradeType = group.Key; *@

                                                        @foreach (var grade in group)
                                                        {
                                                            switch(grade.Type)
                                                            {
                                                                case "Exam":
                                                                    countExam++;
                                                                    gradeExam += grade.GradeValue;
                                                                    break;
                                                                case "Work":
                                                                    countWork++;
                                                                    gradeWork += grade.GradeValue;
                                                                    break;
                                                                case "Task":
                                                                    countTask++;
                                                                    gradeTask += grade.GradeValue;
                                                                    break;
                                                                case "Attention":
                                                                    countAttention++;
                                                                    gradeAttention += grade.GradeValue;
                                                                    break;
                                                                case "Exercises":
                                                                    countExercises++;
                                                                    gradeExercises += grade.GradeValue;
                                                                    break;
                                                                case "Extra":
                                                                    countExtra++;
                                                                    gradeExtra += grade.GradeValue;
                                                                    break;
                                                                default:
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    try
                                                    {
                                                        gradeExam = (gradeExam / countExam) * (decimal) Model.Formula.MultiplierExam / 100;
                                                    }
                                                    catch (Exception ex) { }
                                                    try
                                                    {
                                                        gradeWork = (gradeWork / countWork) * (decimal) Model.Formula.MultiplierWork / 100;
                                                    }
                                                    catch (Exception ex) { }
                                                    try
                                                    {
                                                        gradeTask = (gradeTask / countTask) * (decimal) Model.Formula.MultiplierTask / 100;
                                                    }
                                                    catch (Exception ex) { }
                                                    try
                                                    {
                                                        gradeAttention = (gradeAttention / countAttention) * (decimal) Model.Formula.MultiplierAttention / 100;
                                                    }
                                                    catch (Exception ex) { }
                                                    try
                                                    {
                                                        gradeExercises = (gradeExercises / countExercises) * (decimal) Model.Formula.MultiplierExercises / 100;
                                                    }
                                                    catch (Exception ex) { }
                                                    try
                                                    {
                                                        gradeExtra = (gradeExtra / countExtra) * (decimal) Model.Formula.MultiplierExtra / 100;
                                                    }
                                                    catch (Exception ex) { }

                                                    averageGrade = gradeExam + gradeWork + gradeTask + gradeAttention + gradeExercises + gradeExtra;
                                                    @Math.Round(averageGrade, 2);
                                                }
                                            </span>
                                        </div>
                                        @if (finalGrade != null)
                                        {
                                            <div>
                                                <h6>Final Grade:</h6>
                                                <span class="badge bg-danger text-white">
                                                    @finalGrade.GradeValue
                                                </span>
                                            </div>
                                        }
                                    </div>
                                }
                                catch (Exception ex) { }

                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Final Grade Modal -->
    <div class="modal fade" id="finalGradeModal" tabindex="-1" aria-labelledby="finalGradeModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="finalGradeModalLabel">Set Final Grade</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="finalGradeForm">
                        <div class="mb-3">
                            <label for="finalGradeInput" class="form-label">Final Grade</label>
                            <input type="number" class="form-control" id="finalGradeInput" min="2" max="6" required>
                        </div>
                        <input type="hidden" id="finalGradeSemesterUserId">
                        <input type="hidden" id="finalGradeSubjectId">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="submitFinalGrade()">Submit Final Grade</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function submitGrade(semesterUserId, subjectId)
        {
            var gradeValue = $(`#gradeValue-${semesterUserId}`).val();
            var gradeType = $(`#gradeType-${semesterUserId}`).val();

            $.ajax({
                type: 'GET',
                url: '@Url.Page("/Teacher/CourseDetails", new { handler = "SubmitGrade" })',
                data: {
                    semesterUserId: semesterUserId,
                    subjectId: subjectId,
                    gradeValue: gradeValue,
                    gradeType: gradeType
                },
                success: function (response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error: ' + error);
                }
            });
        }

        function finalGrade(semesterUserId, subjectId, element)
        {
            var averageGradeValue = Math.round(parseFloat($(element).closest('li').find('.avgGrade span.badge').text().trim()));

            $('#finalGradeInput').val(averageGradeValue);
            $('#finalGradeSemesterUserId').val(semesterUserId);
            $('#finalGradeSubjectId').val(subjectId);

            $('#finalGradeModal').modal('show');
        }

        function submitFinalGrade()
        {
            var finalGradeValue = $('#finalGradeInput').val();
            var semesterUserId = $('#finalGradeSemesterUserId').val();
            var subjectId = $('#finalGradeSubjectId').val();

            $.ajax({
                type: 'GET',
                url: '@Url.Page("/Teacher/CourseDetails", new { handler = "SubmitFinalGrade" })',
                data: {
                    semesterUserId: semesterUserId,
                    subjectId: subjectId,
                    finalGrade: finalGradeValue
                },
                success: function (response) {
                    if (response.success)
                    {
                        $('#finalGradeModal').modal('hide');
                        location.reload();
                    }
                    else
                    {
                        alert('Error: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error: ' + error);
                }
            });
        }

    </script>
}
